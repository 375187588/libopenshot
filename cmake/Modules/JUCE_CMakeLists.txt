cmake_minimum_required(VERSION 2.8)

FIND_PACKAGE(OpenGL REQUIRED)
INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})

OPTION(JUCE_ASIO_SUPPORT "Build Juce Asio support" OFF)

IF (JUCE_ASIO_SUPPORT)
  INCLUDE_DIRECTORIES(../asiosdk2)
  ADD_DEFINITIONS(-DJUCE_ASIO)
ENDIF(JUCE_ASIO_SUPPORT)

# Enable stack-unwinding support in c objects on gcc-based platforms.
# Failing to do so will cause your program to be terminated when a png
# or a jpeg exception is thrown on linux or macosx.
IF (CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fexceptions")
ENDIF(CMAKE_COMPILER_IS_GNUCC)


IF (WIN32)
  SET(JUCE_PLATFORM_SPECIFIC_DIR src/native/windows )
  SET(JUCE_PLATFORM_SPECIFIC_FILE src/native/juce_win32_NativeCode.cpp )
  ADD_DEFINITIONS(-DDONT_AUTOLINK_TO_JUCE_LIBRARY)
  
  SET(CMAKE_CXX_FLAGS " ${CMAKE_CXX_FLAGS} -march=i686 ")
  
  SET(JUCE_PLATFORM_SPECIFIC_LIBRARIES
    kernel32.lib
    user32.lib
    shell32.lib
    gdi32.lib
    vfw32.lib
    comdlg32.lib
    winmm.lib
    wininet.lib
    rpcrt4.lib
    ole32.lib
    advapi32.lib
    ws2_32.lib
    OpenGL32.lib
    GlU32.lib
    version.lib
  )
ELSE (WIN32)
  IF   (UNIX)
    IF   (APPLE)
      SET(JUCE_PLATFORM_SPECIFIC_DIR src/native/mac )
      SET(JUCE_PLATFORM_SPECIFIC_FILE src/native/juce_mac_NativeCode.mm )
      SET(JUCE_PLATFORM_SPECIFIC_LIBRARIES "-framework Carbon -framework Cocoa -framework CoreFoundation -framework CoreAudio -framework CoreMidi -framework IOKit -framework AGL -lobjc")
    ELSE (APPLE)
      FIND_PACKAGE(X11 REQUIRED)
      INCLUDE_DIRECTORIES(${X11_INCLUDE_DIR})
      INCLUDE_DIRECTORIES(/usr/include/freetype2)
      ADD_DEFINITIONS(-DLINUX)
      SET(JUCE_PLATFORM_SPECIFIC_DIR src/native/linux )
      SET(JUCE_PLATFORM_SPECIFIC_FILE src/native/juce_linux_NativeCode.cpp )
      SET(JUCE_PLATFORM_SPECIFIC_LIBRARIES ${X11_LIBRARIES} asound freetype Xinerama)
    ENDIF(APPLE)
  ENDIF(UNIX)
ENDIF(WIN32)

FILE(GLOB JUCE_CORE_SOURCES
  src/core/*.cpp
  src/core/*.h
)

FILE(GLOB JUCE_CORE_CRYPTOGRAPHY_SOURCES
  src/cryptography/*.cpp
  src/cryptography/*.h
)

FILE(GLOB JUCE_CORE_CONTAINERS_SOURCES
  src/containers/*.cpp
  src/containers/*.h
)

FILE(GLOB JUCE_CORE_IO_SOURCES
  src/io/*.cpp
  src/io/*.h
  src/io/files/*.cpp
  src/io/files/*.h
  src/io/network/*.cpp
  src/io/network/*.h
  src/io/streams/*.cpp
  src/io/streams/*.h
)

FILE(GLOB JUCE_CORE_MATHS_SOURCES
  src/maths/*.cpp
  src/maths/*.h
)

FILE(GLOB JUCE_CORE_MEMORY_SOURCES
  src/memory/*.cpp
  src/memory/*.h
)

FILE(GLOB JUCE_CORE_UTILITIES_SOURCES
  src/utilities/*.cpp
  src/utilities/*.h
)

FILE(GLOB JUCE_CORE_TEXT_SOURCES
  src/text/*.cpp
  src/text/*.h
)

FILE(GLOB JUCE_CORE_THREADS_SOURCES
  src/threads/*.cpp
  src/threads/*.h
)

FILE(GLOB JUCE_CORE_SOURCES
  juce.h
  juce_Config.h
  ${JUCE_CORE_SOURCES}
  ${JUCE_CORE_CRYPTOGRAPHY_SOURCES}
  ${JUCE_CORE_CONTAINERS_SOURCES}
  ${JUCE_CORE_MATHS_SOURCES}
  ${JUCE_CORE_MEMORY_SOURCES}
  ${JUCE_CORE_IO_SOURCES}
  ${JUCE_CORE_UTILITIES_SOURCES}
  ${JUCE_CORE_TEXT_SOURCES}
  ${JUCE_CORE_THREADS_SOURCES}
)

FILE(GLOB JUCE_APP_APPLICATION_SOURCES
  src/application/*.cpp
  src/application/*.h
)

FILE(GLOB JUCE_APP_AUDIO_SOURCES
  src/audio/*.cpp
  src/audio/*.h
  src/audio/audio_file_formats/*.cpp
  src/audio/audio_file_formats/*.h
  src/audio/audio_sources/*.cpp
  src/audio/audio_sources/*.h
  src/audio/devices/*.cpp
  src/audio/devices/*.h
  src/audio/dsp/*.cpp
  src/audio/dsp/*.h
  src/audio/plugins/*.cpp
  src/audio/plugins/*.h
  src/audio/plugins/formats/*.cpp
  src/audio/plugins/formats/*.h
  src/audio/processors/*.cpp
  src/audio/processors/*.h
  src/audio/synthetisers/*.cpp
  src/audio/synthetisers/*.h
  src/audio/midi/*.cpp
  src/audio/midi/*.h
)

FILE(GLOB JUCE_APP_EVENTS_SOURCES
  src/events/*.cpp
  src/events/*.h
)

FILE(GLOB JUCE_APP_GUI_GRAPHICS_SOURCES
  src/gui/graphics/colour/*.cpp
  src/gui/graphics/colour/*.h
  src/gui/graphics/contexts/*.cpp
  src/gui/graphics/contexts/*.h
  src/gui/graphics/drawables/*.cpp
  src/gui/graphics/drawables/*.h
  src/gui/graphics/effects/*.cpp
  src/gui/graphics/effects/*.h
  src/gui/graphics/fonts/*.cpp
  src/gui/graphics/fonts/*.h
  src/gui/graphics/geometry/*.cpp
  src/gui/graphics/geometry/*.h
  src/gui/graphics/imaging/*.cpp
  src/gui/graphics/imaging/*.h
  src/gui/graphics/imaging/image_file_formats/*.cpp
  src/gui/graphics/imaging/image_file_formats/*.h
)

FILE(GLOB JUCE_APP_GUI_COMPONENTS_SOURCES
  src/gui/components/*.cpp
  src/gui/components/*.h
  src/gui/components/buttons/*.cpp
  src/gui/components/buttons/*.h
  src/gui/components/code_editor/*.cpp
  src/gui/components/code_editor/*.h
  src/gui/components/controls/*.cpp
  src/gui/components/controls/*.h
  src/gui/components/filebrowser/*.cpp
  src/gui/components/filebrowser/*.h
  src/gui/components/keyboard/*.cpp
  src/gui/components/keyboard/*.h
  src/gui/components/layout/*.cpp
  src/gui/components/layout/*.h
  src/gui/components/lookandfeel/*.cpp
  src/gui/components/lookandfeel/*.h
  src/gui/components/menus/*.cpp
  src/gui/components/menus/*.h
  src/gui/components/mouse/*.cpp
  src/gui/components/mouse/*.h
  src/gui/components/properties/*.cpp
  src/gui/components/properties/*.h
  src/gui/components/special/*.cpp
  src/gui/components/special/*.h
  src/gui/components/windows/*.cpp
  src/gui/components/windows/*.h
)


FILE(GLOB JUCE_APP_SOURCES
  src/juce_app_includes.h
  ${JUCE_APP_APPLICATION_SOURCES}
  ${JUCE_APP_AUDIO_SOURCES}
  ${JUCE_APP_EVENTS_SOURCES}
  ${JUCE_APP_GUI_GRAPHICS_SOURCES}
  ${JUCE_APP_GUI_COMPONENTS_SOURCES}
)

FILE(GLOB JUCE_PLATFORM_SOURCES
  ${JUCE_PLATFORM_SPECIFIC_FILE}
  ${JUCE_PLATFORM_SPECIFIC_DIR}/*.h 
  ${JUCE_PLATFORM_SPECIFIC_DIR}/*.cpp
  ${JUCE_PLATFORM_SPECIFIC_DIR}/*.mm
)

SET(JUCE_SOURCES
  ${JUCE_CORE_SOURCES}
  ${JUCE_APP_SOURCES}
  ${JUCE_PLATFORM_SOURCES}
)

SOURCE_GROUP(Headers FILES
  juce.h
  juce_Config.h
  src/juce_app_includes.h
  src/juce_DefineMacros.h
  src/juce_WithoutMacros.h
)

SOURCE_GROUP(Core/Core          FILES   ${JUCE_CORE_SOURCES})
SOURCE_GROUP(Core/Crypto        FILES   ${JUCE_CORE_CRYPTOGRAPHY_SOURCES})
SOURCE_GROUP(Core/Containers    FILES   ${JUCE_CORE_CONTAINERS_SOURCES})
SOURCE_GROUP(Core/Maths         FILES   ${JUCE_CORE_MATHS_SOURCES})
SOURCE_GROUP(Core/Memory        FILES   ${JUCE_CORE_MEMORY_SOURCES})
SOURCE_GROUP(Core/IO            FILES   ${JUCE_CORE_IO_SOURCES})
SOURCE_GROUP(Core/Utilities     FILES   ${JUCE_CORE_UTILITIES_SOURCES})
SOURCE_GROUP(Core/Text          FILES   ${JUCE_CORE_TEXT_SOURCES})
SOURCE_GROUP(Core/Threads       FILES   ${JUCE_CORE_THREADS_SOURCES})
SOURCE_GROUP(App/Application    FILES   ${JUCE_APP_APPLICATION_SOURCES})
SOURCE_GROUP(App/Audio          FILES   ${JUCE_APP_AUDIO_SOURCES})
SOURCE_GROUP(App/Events         FILES   ${JUCE_APP_EVENTS_SOURCES})
SOURCE_GROUP(App/Gui/Graphics   FILES   ${JUCE_APP_GUI_GRAPHICS_SOURCES})
SOURCE_GROUP(App/Gui/Components FILES   ${JUCE_APP_GUI_COMPONENTS_SOURCES})
SOURCE_GROUP(Platform           FILES   ${JUCE_PLATFORM_SOURCES})

ADD_LIBRARY(juce SHARED
  ${JUCE_SOURCES}
)

TARGET_LINK_LIBRARIES(juce
  ${JUCE_PLATFORM_SPECIFIC_LIBRARIES}
  ${OPENGL_LIBRARIES}
)


# Install Files
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/juce.h
	DESTINATION include/juce)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/juce_Config.h
	DESTINATION include/juce)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/juce_amalgamated.h
	DESTINATION include/juce)
INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src DESTINATION include/juce
          FILES_MATCHING PATTERN "*.h")


IF (UNIX)
		INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/libjuce.so
		DESTINATION lib)
ELSE (UNIX)
	IF (WIN32)
			INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/libjuce.dll
			DESTINATION lib)
	ELSE (WIN32)
		IF (APPLE)
				INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/libjuce.so
				DESTINATION lib)
		ENDIF(APPLE)
	ENDIF(WIN32)
ENDIF(UNIX)

